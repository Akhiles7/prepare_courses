---
- name: Check clean
  include: "clean.yml"

- name: Add key
  apt_key:
    keyserver: "{{ key_server }}"
    id: "{{ repo_key  }}"

- name: Add Docker repository
  apt_repository:
    repo: "{{ repo_server }}"
    state: present

- name: Install Docker Engine
  apt:
    name: docker-engine
    state: latest
    update_cache: yes

- name: Enable and restart Docker service
  service:
    name: docker
    enabled: yes
    state: restarted

- shell: docker -v
  register: dout

- fail: msg="Docker is not v17.0+. Wrong version!"
  when: "not '17.0' in dout.stdout"

- name: Install Docker python modules
  shell: "pip install {{ item }}"
  with_items:
    - docker==2.0.1
    - docker-compose

- name: Adding user {{ course_user }} into docker group
  user: 
    name: "{{ course_user }}"
    groups: docker
    append: yes

- name: Create course path
  file:
    path: "{{ course_path }}"
    state: directory
    mode: 0755
    owner: "{{ course_user }}"
    group: "{{ course_user }}"
  tags: dirs

- name: Cloning jenkins-pipeline-workshop repo
  git:
    repo: "{{ repo_url }}"
    dest: "{{ repo_path }}"
    force: yes
  tags: repo

- name: Prepare directories
  file:
    path: "{{ repo_path }}"
    state: directory
    recurse: yes
    owner: "{{ course_user }}"
    group: "{{ course_user }}"
    mode: 0777 #For training course only!
  tags: dirs

- name: Pull Slave image #Need to move this to docker-compose!
  ignore_errors: True
  docker_image:
    name: "{{ image.slave }}" 
    pull: yes 
  tags: docker, pull-slave-image

- name: Pull Docker images
  ignore_errors: True
  docker_service:
    project_src: "{{ repo_path }}"
    pull: yes
  tags: docker

- name: Create directory for IDEA
  file:
    path: "{{ idea_path }}"
    state: directory
    mode: 0755
    owner: "{{ course_user }}"
    group: "{{ course_user }}"
  tags: dirs,idea

- name: "Check {{ idea_path }} size"
  shell: "du -hsb {{ idea_path }} | cut -f1"
  register: isout
  tags: idea

- debug:
    msg: "{{ idea_path }} size is {{ isout }}"
  when: isout is defined
  tags: idea

- name: Unarchive IDEA
  unarchive:
    src: "{{ idea_url }}"
    dest: "{{ idea_path }}"
    remote_src: yes
    creates: no
  when: isout.stdout|int < 871000000 
  tags: idea
